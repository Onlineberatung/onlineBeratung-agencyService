openapi: 3.0.1
info:
  title: will be replaced
  description: This information will be replaced by the SpringFox config information
  version: 0.0.1
paths:
  /agencyadmin:
    get:
      tags:
        - root-controller
      summary: 'Returns the hal root entry point. [Authorization: Role: agency-admin]'
      operationId: getRoot
      responses:
        200:
          description: OK - successfull operation
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/RootDTO'
        401:
          description: UNAUTHORIZED - no/invalid role/authorization
      security:
        - Bearer: [ ]
  /agencyadmin/agencies:
    get:
      tags:
        - admin-agency-controller
      summary: 'Returns the list of agencies by search query parameter. [Authorization: Role:
      agency-admin]'
      operationId: searchAgencies
      parameters:
        - name: q
          in: query
          description: The query parameter to search for
          schema:
            type: string
            example: "Freiburg"
        - name: page
          in: query
          description: Number of page where to start in the query (1 = first page)
          required: true
          schema:
            type: integer
            example: 1
        - name: perPage
          in: query
          description: Number of items which are being returned per page
          required: true
          schema:
            type: integer
            example: 20
      responses:
        200:
          description: OK - successfull operation
          content:
            'application/hal+json':
              schema:
                $ref: '#/components/schemas/AgencyAdminSearchResultDTO'
        400:
          description: BAD REQUEST - invalid/incomplete request or body object
        401:
          description: UNAUTHORIZED - no/invalid role/authorization
        500:
          description: INTERNAL SERVER ERROR - server encountered unexpected condition
      security:
        - Bearer: [ ]
    post:
      tags:
        - admin-agency-controller
      summary: 'Creates a new agency [Authorization: Role: agency-admin]'
      operationId: createAgency
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/AgencyDTO'
        required: true
      responses:
        201:
          description: CREATED - agency was created successfully
          content:
            'application/hal+json':
              schema:
                $ref: '#/components/schemas/AgencyAdminFullResponseDTO'
        400:
          description: BAD REQUEST - invalid/incomplete request or body object
        401:
          description: UNAUTHORIZED - no/invalid role/authorization
        500:
          description: INTERNAL SERVER ERROR - server encountered unexpected condition
      security:
        - Bearer: [ ]
  /agencyadmin/agencies/{agencyId}:
    get:
      tags:
        - admin-agency-controller
      summary: 'Get an agency [Authorization: Role: agency-admin]'
      operationId: getAgency
      parameters:
        - name: agencyId
          in: path
          description: Agency ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK - agency found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/AgencyAdminFullResponseDTO'
        400:
          description: BAD REQUEST - invalid/incomplete request
        401:
          description: UNAUTHORIZED - no/invalid role/authorization
        404:
          description: NOT FOUND - agency with the provided ID does not exist
        500:
          description: INTERNAL SERVER ERROR - server encountered unexpected condition
      security:
        - Bearer: [ ]
    delete:
      tags:
        - admin-agency-controller
      summary: 'Flags an agency as deleted [Authorization: Role: agency-admin]'
      operationId: deleteAgency
      parameters:
        - name: agencyId
          in: path
          description: Agency Id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK - agency was deleted successfully
        400:
          description: BAD REQUEST - invalid/incomplete request
        404:
          description: NOT FOUND - agency not found
        409:
          description: CONFLICT - agency contains consultants and therefore can't be deleted
        423:
          description: LOCKED - agency is locked for deletion (e.g. Kreuzbund)
        401:
          description: UNAUTHORIZED - no/invalid role/authorization
        500:
          description: INTERNAL SERVER ERROR - server encountered unexpected condition
      security:
        - Bearer: [ ]
    put:
      tags:
        - admin-agency-controller
      summary: 'Updates an agency [Authorization: Role: agency-admin]'
      operationId: updateAgency
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UpdateAgencyDTO'
        required: true
      parameters:
        - name: agencyId
          in: path
          description: Agency Id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK - agency was updated successfully
          content:
            'application/hal+json':
              schema:
                $ref: '#/components/schemas/AgencyAdminFullResponseDTO'
        400:
          description: BAD REQUEST - invalid/incomplete request
        404:
          description: NOT FOUND - agency not found
        401:
          description: UNAUTHORIZED - no/invalid role/authorization
        500:
          description: INTERNAL SERVER ERROR - server encountered unexpected condition
      security:
        - Bearer: [ ]
  /agencyadmin/dioceses:
    get:
      tags:
        - admin-agency-controller
      summary: 'Returns the full list of dioceses [Authorization: Role: agency-admin]'
      operationId: getDioceses
      parameters:
        - name: page
          in: query
          description: Number of page where to start in the query (1 = first page)
          required: true
          schema:
            type: integer
            example: 1
        - name: perPage
          in: query
          description: Number of items which are being returned per page
          required: true
          schema:
            type: integer
            example: 20
      responses:
        200:
          description: OK - successfull operation
          content:
            'application/hal+json':
              schema:
                $ref: '#/components/schemas/DioceseAdminResultDTO'
        400:
          description: BAD REQUEST - invalid/incomplete request or body object
        401:
          description: UNAUTHORIZED - no/invalid role/authorization
        500:
          description: INTERNAL SERVER ERROR - server encountered unexpected condition
      security:
        - Bearer: [ ]
  /agencyadmin/agencies/{agencyId}/changetype:
    post:
      tags:
        - admin-agency-controller
      summary: 'Change an agency from team-agency to default and vice-versa and switch the
      associated consultant accounts to team consultant or default consultant. Ongoing team
      counselings change to 1:1 when converting agency to default status. 1:1 counselings remain
      single counselings when swapping the agency to team-agency. [Authorization: Role: user-admin]'
      operationId: changeAgencyType
      parameters:
        - name: agencyId
          in: path
          description: Agency Id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/AgencyTypeRequestDTO'
      responses:
        200:
          description: OK - agency type successfully changed
        400:
          description: BAD REQUEST - invalid/incomplete request or body object
        401:
          description: UNAUTHORIZED - no/invalid role/authorization
        500:
          description: INTERNAL SERVER ERROR - server encountered unexpected condition
      security:
        - Bearer: [ ]
  /agencyadmin/agencies/{agencyId}/postcoderanges:
    get:
      tags:
        - admin-agency-controller
      summary: 'Returns the list of the postcode ranges for an agency.  [Authorization: Role: agency-admin]'
      operationId: getAgencyPostcodeRanges
      parameters:
        - name: agencyId
          in: path
          description: Agency Id
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          description: Number of page where to start (1 = first page)
          required: true
          schema:
            type: integer
            example: 1
        - name: perPage
          in: query
          description: Number of items which are being returned per page
          required: true
          schema:
            type: integer
            example: 20
      responses:
        200:
          description: OK - successfull operation
          content:
            'application/hal+json':
              schema:
                $ref: '#/components/schemas/AgencyPostcodeRangesResultDTO'
        400:
          description: BAD REQUEST - invalid/incomplete request or body object
        401:
          description: UNAUTHORIZED - no/invalid role/authorization
        500:
          description: INTERNAL SERVER ERROR - server encountered unexpected condition
      security:
        - Bearer: [ ]
    post:
      tags:
        - admin-agency-controller
      summary: 'Creates a new postcode range for an agency [Authorization: Role: agency-admin]'
      operationId: createAgencyPostcodeRange
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/PostCodeRangeDTO'
        required: true
      parameters:
        - name: agencyId
          in: path
          description: Agency Id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        201:
          description: CREATED - agency postcode range was created successfully
          content:
            'application/hal+json':
              schema:
                $ref: '#/components/schemas/AgencyPostcodeRangeResponseDTO'
        400:
          description: BAD REQUEST - invalid/incomplete request or body object
        401:
          description: UNAUTHORIZED - no/invalid role/authorization
        404:
          description: NOT FOUND - provided agency ID does not exist
        500:
          description: INTERNAL SERVER ERROR - server encountered unexpected condition
      security:
        - Bearer: [ ]

  /agencyadmin/postcoderanges/{postcodeRangeId}:
    get:
      tags:
        - admin-agency-controller
      summary: 'Get a specific postcode range for an agency [Authorization: Role: agency-admin]'
      operationId: getAgencyPostcodeRange
      parameters:
        - name: postcodeRangeId
          in: path
          description: Postcode range id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK - agency postcode range found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/AgencyPostcodeRangeResponseDTO'
        204:
          description: NO CONTENT - agency postcode range with the provided ID does not exist
        400:
          description: BAD REQUEST - invalid/incomplete request
        401:
          description: UNAUTHORIZED - no/invalid role/authorization
        500:
          description: INTERNAL SERVER ERROR - server encountered unexpected condition
      security:
        - Bearer: [ ]
    put:
      tags:
        - admin-agency-controller
      summary: 'Updates an existing postcode range for an agency [Authorization: Role: agency-admin]'
      operationId: updateAgencyPostcodeRange
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/PostCodeRangeDTO'
        required: true
      parameters:
        - name: postcodeRangeId
          in: path
          description: Postcode range id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK - agency postcode range was successfully updated
          content:
            'application/hal+json':
              schema:
                $ref: '#/components/schemas/AgencyPostcodeRangeResponseDTO'
        400:
          description: BAD REQUEST - invalid/incomplete request or body object
        401:
          description: UNAUTHORIZED - no/invalid role/authorization
        404:
          description: NOT FOUND - agency postcode range with the provided ID does not exist
        500:
          description: INTERNAL SERVER ERROR - server encountered unexpected condition
      security:
        - Bearer: [ ]
    delete:
      tags:
        - admin-agency-controller
      summary: 'Delete a specific postcode range [Authorization: Role: agency-admin]'
      operationId: deleteAgencyPostcodeRange
      parameters:
        - name: postcodeRangeId
          in: path
          description: Postcode range id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK - agency postcode range was deleted sucessfully
        400:
          description: BAD REQUEST - invalid/incomplete request
        401:
          description: UNAUTHORIZED - no/invalid role/authorization
        404:
          description: NOT FOUND - agency postcode range with the provided ID does not exist
        500:
          description: INTERNAL SERVER ERROR - server encountered unexpected condition
      security:
        - Bearer: [ ]
components:
  schemas:
    RootDTO:
      type: object
      required:
        - _links
      properties:
        _links:
          $ref: '#/components/schemas/RootLinks'

    RootLinks:
      type: object
      required:
        - self
      properties:
        self:
          $ref: '#/components/schemas/HalLink'
        agencies:
          $ref: '#/components/schemas/HalLink'
        agency:
          $ref: '#/components/schemas/HalLink'
        agencypostcodes:
          $ref: '#/components/schemas/HalLink'
        dioceses:
          $ref: '#/components/schemas/HalLink'

    HalLink:
      type: object
      required:
        - href
      properties:
        href:
          type: string
        method:
          type: string
          enum: [ GET, POST, DELETE, PUT ]
        templated:
          type: boolean

    AgencyAdminSearchResultDTO:
      type: object
      properties:
        _embedded:
          type: array
          items:
            $ref: '#/components/schemas/AgencyAdminFullResponseDTO'
        _links:
          $ref: '#/components/schemas/SearchResultLinks'
        total:
          type: integer

    AgencyAdminResponseDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
          maximum: 9223372036854775807
          example: 684
        dioceseId:
          type: integer
          format: int64
          minimum: 0
          maximum: 9223372036854775807
          example: 684
        name:
          type: string
          maxLength: 100
          example: "Suchtberatung Freiburg"
        description:
          type: string
          maxLength: 65534
          example: "Our agency provides help for the following topics: Lorem ipsum.."
        postcode:
          type: string
          minLength: 5
          maxLength: 5
          example: "79106"
        city:
          type: string
          maxLength: 100
          example: "Bonn"
        teamAgency:
          type: boolean
          example: false
        offline:
          type: boolean
          example: false
        consultingType:
          type: integer
          minimum: 0
          maximum: 127
          example: 1
        url:
          type: string
          maxLength: 500
          example: https://www.domain.com
        external:
          type: boolean
          example: false
        createDate:
          type: string
          example: "2019-08-23T08:52:05"
        updateDate:
          type: string
          example: "2019-12-02T13:12:08"
        deleteDate:
          type: string
          example: "2020-09-02T15:53:23"

    PostCodeRangeDTO:
      type: object
      properties:
        postcodeFrom:
          type: string
          minLength: 5
          maxLength: 5
          example: "79106"
        postcodeTo:
          type: string
          minLength: 5
          maxLength: 5
          example: "79106"

    DioceseAdminResultDTO:
      type: object
      properties:
        _embedded:
          type: array
          items:
            $ref: '#/components/schemas/DioceseResponseDTO'
        _links:
          $ref: '#/components/schemas/PaginationLinks'
        total:
          type: integer

    DioceseResponseDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
          maximum: 9223372036854775807
          example: 12
        name:
          type: string
          maxLength: 100
          example: "Freiburg"
        createDate:
          type: string
          example: "2019-08-23T08:52:05"
        updateDate:
          type: string
          example: "2019-12-02T13:12:08"

    AgencyDTO:
      type: object
      required:
        - dioceseId
        - name
        - teamAgency
        - consultingType
        - external
      properties:
        dioceseId:
          type: integer
          format: int64
          minimum: 0
          maximum: 9223372036854775807
          example: 12
        name:
          type: string
          maxLength: 100
          example: "Beratungsstelle"
        description:
          type: string
          maxLength: 10000
          example: "Beschreibung Beratungsstelle"
        postcode:
          type: string
          minLength: 5
          maxLength: 5
          example: "79106"
        city:
          type: string
          maxLength: 100
          example: "Muenchen"
        teamAgency:
          type: boolean
          example: false
        consultingType:
          type: integer
          minimum: 0
          maximum: 127
          example: 1
        url:
          type: string
          maxLength: 500
          example: https://www.domain.com
        external:
          type: boolean
          example: false

    AgencyAdminFullResponseDTO:
      type: object
      properties:
        _embedded:
          $ref: '#/components/schemas/AgencyAdminResponseDTO'
        _links:
          $ref: '#/components/schemas/AgencyLinks'

    UpdateAgencyDTO:
      type: object
      required:
        - dioceseId
        - name
        - offline
        - external
      properties:
        dioceseId:
          type: integer
          format: int64
          minimum: 0
          maximum: 9223372036854775807
          example: 12
        name:
          type: string
          example: "Beratungsstelle"
          minLength: 1
          maxLength: 100
        description:
          type: string
          example: "Beschreibung Beratungsstelle..."
          maxLength: 10000
        postcode:
          type: string
          minLength: 5
          maxLength: 5
          example: "79106"
        city:
          type: string
          example: "Muenchen"
          maxLength: 100
        offline:
          type: boolean
          example: false
        url:
          type: string
          maxLength: 500
          example: https://www.domain.com
        external:
          type: boolean
          example: false

    UpdateAgencyResponseDTO:
      type: object
      properties:
        _embedded:
          $ref: '#/components/schemas/AgencyAdminResponseDTO'
        _links:
          $ref: '#/components/schemas/DefaultLinks'

    AgencyPostcodeRangeResponseDTO:
      type: object
      properties:
        _embedded:
          $ref: '#/components/schemas/PostCodeRangeResponseDTO'
        _links:
          $ref: '#/components/schemas/DefaultLinks'

    AgencyPostcodeRangesResultDTO:
      type: object
      properties:
        _embedded:
          type: array
          items:
            $ref: '#/components/schemas/AgencyPostcodeRangeResponseDTO'
        _links:
          $ref: '#/components/schemas/PaginationLinks'
        total:
          type: integer

    PostCodeRangeResponseDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
          maximum: 9223372036854775807
          example: 684
        agencyId:
          type: integer
          format: int64
          minimum: 0
          maximum: 9223372036854775807
          example: 684
        postcodeFrom:
          type: string
          minLength: 5
          maxLength: 5
          example: "79106"
        postcodeTo:
          type: string
          minLength: 5
          maxLength: 5
          example: "79106"
        createDate:
          type: string
          example: "2019-08-23T08:52:05"
        updateDate:
          type: string
          example: "2019-12-02T13:12:08"

    AgencyTypeRequestDTO:
      type: object
      required:
        - agencyType
      properties:
        agencyType:
          type: string
          enum:
            - 'TEAM_AGENCY'
            - 'DEFAULT_AGENCY'

    PaginationLinks:
      type: object
      required:
        - self
      properties:
        self:
          $ref: '#/components/schemas/HalLink'
        next:
          $ref: '#/components/schemas/HalLink'
        previous:
          $ref: '#/components/schemas/HalLink'

    SearchResultLinks:
      allOf:
        - $ref: '#/components/schemas/PaginationLinks'
        - type: object
          properties:
            search:
              $ref: '#/components/schemas/HalLink'

    DefaultLinks:
      type: object
      required:
        - self
      properties:
        self:
          $ref: '#/components/schemas/HalLink'
        update:
          $ref: '#/components/schemas/HalLink'
        delete:
          $ref: '#/components/schemas/HalLink'

    AgencyLinks:
      allOf:
        - $ref: '#/components/schemas/DefaultLinks'
        - type: object
          properties:
            postcoderanges:
              $ref: '#/components/schemas/HalLink'

  securitySchemes:
    Bearer:
      type: apiKey
      name: Authorization
      in: header
